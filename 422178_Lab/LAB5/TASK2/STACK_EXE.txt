**************** STACK EXECUTION USING ARRAY *************************
OPERATIONS PERFORMED(FUNCTIONS):1)initialisation(init)
                                2)insertion(push)
                                3)deletion(pop)
                                4)printing top element(peek)
                                5)remove stack(destroy)


//main.c
#include <stdio.h>
#include "head.h"

int main(){
   struct stack sobj;
   int value;
   init(&sobj);
   for(int i=1;i<=5;i++){
      if(push(&sobj,i*i)){
      printf("pushed %d into stack \n",i*i);
      }
   }
   if(pop(&sobj,&value)){
      printf("popped %d out of stack \n",value);
      }
   peek(&sobj);
   int success=destroy(&sobj);
   if(success==1){
      printf("successfully destroyed stack \n");
   }
   else{
      printf("destruction failed stack\n");
   }
   return 1;
}
   
//init.c
#include <stdio.h>
#include "head.h"

int init(struct stack *s){
    (s->top)=-1;
    return 1;
}

//isFull.c
#include <stdio.h>
#include "head.h"

int isFull(struct stack *s){
    if((s->top)==size-1){
      return 1;
      }
      return 0;
}

//isEmpty.c
#include <stdio.h>
#include "head.h"

int isEmpty(struct stack *s){
    if((s->top)==-1){
       return 1;
       }
    return 0;
}

//push.c
#include <stdio.h>
#include "head.h"

int push(struct stack*s,int n){
   if(isFull(s)){
       return 0;
    }
   (s->top)++;
   s->arr[(s->top)]=n;
   return 1;
}

//pop.c
#include <stdio.h>
#include "head.h"

int pop(struct stack *s,int * value){
    if(isEmpty(s)){
        return 0;
      }
    *value=(s->arr[(s->top)]);
    (s->top)--;
    return 1;
 }

//peek.c
#include <stdio.h>
#include "head.h"

int peek(struct stack *s){
    if(isEmpty(s)){
        return 0;
      }
    printf("top element of the stack is %d \n",(s->arr[(s->top)]));
    return 1;
 }

//destroy.c
#include <stdio.h>
#include "head.h"

int destroy(struct stack*s){
   if(isEmpty(s)){
       return 0;
    }
   (s->top)=-1;
   return 1;
}

//head.h
#ifndef HEAD_H
#define HEAD_H
#define size 500

struct stack{
   int arr[size];
   int top;
};

int init(struct stack*s);
int push(struct stack*s,int n);
int pop(struct stack*s,int*value);
int peek(struct stack*s);
int destroy(struct stack*s);
int isFull(struct stack*s);
int isEmpty(struct stack*s);

#endif

// main.c
#include "postfixeval.h"

int main()
{
    printf("Enter string:");
    char postfix[80];
    gets(postfix);

    int value;
    evaluatepostfix(postfix, &value);
    printf("Ans: %d", value);
    return 0;
}


//stackfunctions.c
#include "postfixeval.h"

int init(struct stack *s)
{
    s->top = -1;
    return 1;
}

int isEmpty(struct stack *s)
{
    if (s->top == -1)
        return 1;
    return 0;
}

int isFull(struct stack *s)
{
    if (s->top == SIZE - 1)
        return 1;
    return 0;
}

int push(struct stack *s, int c)
{
    if (isFull(s))
        return 0;

    (s->top)++;
    s->arr[s->top] = c;
    return 1;
}

int pop(struct stack *s, int *c)
{
    if (isEmpty(s))
        return 0;

    *c = s->arr[s->top];
    (s->top)--;
    return 1;
}

int destroy(struct stack *s)
{
    s->top = -1;
    return 1;
}


//programfunctions.c
#include "postfixeval.h"

int apply(int op1, int op2, char op)
{
    switch (op)
    {
    case '+':
        return op1 + op2;
    case '-':
        return op1 - op2;
    case '*':
        return op1 * op2;
    case '/':
        return op1 / op2;
    }
}

int evaluatepostfix(char *postfix, int *value)
{
    int op1 = 0, op2 = 0;
    int result = 0;
    struct stack s;
    init(&s);

    int i = 0;
    while (postfix[i] != '\0')
    {
        if (postfix[i] >= '0' && postfix[i] <= '9')
        {
            push(&s, postfix[i] - '0');
        }

        else if (postfix[i] == '+' || postfix[i] == '-' || postfix[i] == '*' || postfix[i] == '/')
        {
            if (isEmpty(&s))
                return 0;
            pop(&s, &op2);

            if (isEmpty(&s))
                return 0;
            pop(&s, &op1);

            result = apply(op1, op2, postfix[i]);
            push(&s, result);
        }
        i++;
    }
    if (!isEmpty(&s))
    {
        pop(&s, value);
        destroy(&s);
        return 1;
    }
    else
    {
        destroy(&s);
        return 1;
    }
    return 0;
}


//postfixeval.h
#include <stdio.h>
#include <string.h>

#define SIZE 100

struct stack
{
    char arr[SIZE];
    int top;
};

//Stack functions
int init(struct stack *s);
int isEmpty(struct stack *s);
int isFull(struct stack *s);
int push(struct stack *s, int c);
int pop(struct stack *s, int *c);
int destroy(struct stack *s);

//Program functions
int apply(int op1, int op2, char op);
int evaluatepostfix(char *postfix, int *value);
